================================================================================
 7. 문서 내장으로 읽기 퍼포먼스 극대화

================================================================================
MongoDB 핵심 - 적절한 내장(denormalize)

처음 부터 자식 내용을 부모에 내장 시키기. 
그러면, 내장 작업 추가가 필요함. 

================================================================================
수정된 faker 적용하기
faker2.js 참고 

설명 코드  참고.


================================================================================
Comment POST API 수정하기

블로그에 _id , 유저, 이름 추가하고, 
후기와 후기 아이디로 같이 추가 할 예정.

1. 모델에 Blog.js 수정.
2. blogRoute.js 1차 테스트 
3. 하나만 포스트맨으로 테스트 
주의 )
{
    "title":"second blog title111!!",
    "content":"second blog content",
    "userId":"63fbf04bb73858ce094c74a7",
    "islive": true
}

4. post 게시글 하나 등록 테스트, 유저는 콤파스에서 아무 유저 아이디 
가져오기. 
5. 등록 후, 콤파스에서 해당 블로그 오브젝트 아이디로 검사하기. 
ex) 
{_id: ObjectId('63fc2796cd319b68f4bea8f3')}
6. 다른 게시글은 유저에 아이디만 저장이 되어 있음. 

7. 가상 데이터는 주석. 
commentRoute.js 작업. 

8. 후기 API 테스트 포스트맨 
버그 발생.


================================================================================
debugging & testing Comment POST API

1. 블로그 코멘트 작성하고, 
콤파스에서 확인하기. 
{_id: ObjectId('63fc3d49e94dbc99f0cae043')}

================================================================================
Blog에 Comment 내장하기
1. Comment 작업중. 
2. commentRoute 작업중. 
3. 포스트맨 테스트 
콤파스로 확인, 코멘트에 userFullName  추가 되어 있음. 

================================================================================
Nesting 성능 테스트
1. 과거 데이터 삭제. 콤파스로 
2. server.js -> faker2 변경 
const { generateFakeData } = require("../faker2")
3. 생성시 오류 발생 , axios 
유저는 생성, 블로그, 코멘트는 작성 안됨. 
이유, 서버가 켜지기 전에 호출을해서 순서 조정하면됨. 

4. 한번에 axios 통신 많이 하면 다 처리를 못하니 나눠서 작업 중. 
5. 임의 유저, 게시글, 코멘트 작성 후, 콤파스로 데이터 확인 
6. blogRoute.js 수정. 
7. 리미트 20, 50 등 성능 측정 client.js 

================================================================================
"$" 내장된 특정 문서 수정하기

1. commentRoute 작업 중. 
nesting이 가능하게끔 수정하는 코드 작업. 

2. 포스트맨으로 테스트
patch 로 해당  URL 주소 저장 했음 . 나중에 참고하기. 
localhost:3000/blog/63fc45cc38c7c7b116979afa/comment/63fc45cc38c7c7b116979bfe

3. 변경확인. 해당 블로그의 코멘트 하나만 변경 확인. 
조회는 코멘트 컬렉션에서 조회하기. 




================================================================================
updateMany
유저 정보 수정하기. 
블로그 글 -> 코멘트 수정.

1. userRoute.js 수정 
2. 포스트맨 리퀘스트 추가 
3. 콤파스로 임의의 유저로 블로그 조회 하기. 
예){"user._id": ObjectId('63fc45cb38c7c7b116979ae4')}
4. 현재 한 유저당 게시글 1개 라서 -> 데이터 변경하기. 
5. server.js 수정. 
반복문 없이 수정. 
6. 다시 검색. 
1명이 쓴 5개 의 게시글의 유저가 다바뀌는 테스트 
{"user._id":ObjectId('63fc52d3f15d6d36f751412d')}
변경 안됨. 버그 찾기 
await 빠짐. 

7. 콤파스로, 
포스트맨으로 /:userId 변경하고, 
콤파스에서 블로그 및 유저 에서 변경된 부분 확인하기. 

================================================================================
arrayFilter
후기 부분에 유저 이름 부분 변경

1. userRoute.js 작업중 
2. 콤파스로 해당 유저로 블로그 조회. 
3. 블로그에 코멘트 작성한 유저 중에서 이름을 변경해서 그 부분만 변경되는 부분 확인. 
4. userRoute.js Promise.all 작업. 



================================================================================
$pull, $elemMatch
후기 삭제 

1. commentRoute.js 작업
2. 테스트 작업. 
comment 에 api 추가 
delete 예제 
localhost:3000/blog/63fc52d3f15d6d36f7514143/comment/63fc52d3f15d6d36f7514237
3. 해당 블로그에 블로그아이디, 코멘트 아이디 , 해당 코멘트 삭제 확인 완료.

================================================================================
User 삭제하기

1. 


================================================================================
스키마 설계
